PS C:\Users\tchom\OneDrive\Documents\project graph theory> & C:/Users/tchom/AppData/Local/Programs/Python/Python313/python.exe "c:/Users/tchom/OneDrive/Documents/project graph theory/script/main.py"
Select problem number (1–10) or q to quit: 2
Choose algorithm ([max] Ford-Fulkerson / [push] Push-Relabel): max

=== Ford–Fulkerson on example2.txt ===

⋆ Capacity table display :
10
   0   16    3    8    0    0    0    0    0    0
   0    0    3    0    3    3    4    0    0    0
   0    0    0    7    0    5    0    0    0    0
   0    0    0    0    0    0    0    0    7    0
   0    0    0    0    0    0    1    8    0    0
   0    0    0    0    8    0    0    0    0    0
   0    0    0    0    0    0    0    0    0    8
   0    0    0    0    0    0    3    0    4    6
   0    0    0    0    0    0    0    0    0    8
   0    0    0    0    0    0    0    0    0    0

The initial residual graph is the starting graph.

⋆ Iteration 1 :
Breadth-first search :
abc ; Π(a) = s; Π(b) = s; Π(c) = s
defh ; Π(d) = a; Π(e) = a; Π(f) = a; Π(h) = c
gi ; Π(g) = d; Π(i) = f
Detection of an improving chain : safi with a flow 4.

Modifications to the residual graph :
      s    a    b    c    d    e    f    g    h    i
 s    0   12    3    8    0    0    0    0    0    0
 a    4    0    3    0    3    3    0    0    0    0
 b    0    0    0    7    0    5    0    0    0    0
 c    0    0    0    0    0    0    0    0    7    0
 d    0    0    0    0    0    0    1    8    0    0
 e    0    0    0    0    8    0    0    0    0    0
 f    0    4    0    0    0    0    0    0    0    4
 g    0    0    0    0    0    0    3    0    4    6
 h    0    0    0    0    0    0    0    0    0    8
 i    0    0    0    0    0    0    4    0    0    0

⋆ Iteration 2 :
Breadth-first search :
abc ; Π(a) = s; Π(b) = s; Π(c) = s
deh ; Π(d) = a; Π(e) = a; Π(h) = c
fgi ; Π(f) = d; Π(g) = d; Π(i) = h
Detection of an improving chain : schi with a flow 7.

Modifications to the residual graph :
      s    a    b    c    d    e    f    g    h    i
 s    0   12    3    1    0    0    0    0    0    0
 a    4    0    3    0    3    3    0    0    0    0
 b    0    0    0    7    0    5    0    0    0    0
 c    7    0    0    0    0    0    0    0    0    0
 d    0    0    0    0    0    0    1    8    0    0
 e    0    0    0    0    8    0    0    0    0    0
 f    0    4    0    0    0    0    0    0    0    4
 g    0    0    0    0    0    0    3    0    4    6
 h    0    0    0    7    0    0    0    0    0    1
 i    0    0    0    0    0    0    4    0    7    0

⋆ Iteration 3 :
Breadth-first search :
abc ; Π(a) = s; Π(b) = s; Π(c) = s
de ; Π(d) = a; Π(e) = a
fg ; Π(f) = d; Π(g) = d
ih ; Π(i) = f; Π(h) = g
Detection of an improving chain : sadfi with a flow 1.

Modifications to the residual graph :
      s    a    b    c    d    e    f    g    h    i
 s    0   11    3    1    0    0    0    0    0    0
 a    5    0    3    0    2    3    0    0    0    0
 b    0    0    0    7    0    5    0    0    0    0
 c    7    0    0    0    0    0    0    0    0    0
 d    0    1    0    0    0    0    0    8    0    0
 e    0    0    0    0    8    0    0    0    0    0
 f    0    4    0    0    1    0    0    0    0    3
 g    0    0    0    0    0    0    3    0    4    6
 h    0    0    0    7    0    0    0    0    0    1
 i    0    0    0    0    0    0    5    0    7    0

⋆ Iteration 4 :
Breadth-first search :
abc ; Π(a) = s; Π(b) = s; Π(c) = s
de ; Π(d) = a; Π(e) = a
g ; Π(g) = d
fhi ; Π(f) = g; Π(h) = g; Π(i) = g
Detection of an improving chain : sadgi with a flow 2.

Modifications to the residual graph :
      s    a    b    c    d    e    f    g    h    i
 s    0    9    3    1    0    0    0    0    0    0
 a    7    0    3    0    0    3    0    0    0    0
 b    0    0    0    7    0    5    0    0    0    0
 c    7    0    0    0    0    0    0    0    0    0
 d    0    3    0    0    0    0    0    6    0    0
 e    0    0    0    0    8    0    0    0    0    0
 f    0    4    0    0    1    0    0    0    0    3
 g    0    0    0    0    2    0    3    0    4    4
 h    0    0    0    7    0    0    0    0    0    1
 i    0    0    0    0    0    0    5    2    7    0

⋆ Iteration 5 :
Breadth-first search :
abc ; Π(a) = s; Π(b) = s; Π(c) = s
e ; Π(e) = a
d ; Π(d) = e
g ; Π(g) = d
fhi ; Π(f) = g; Π(h) = g; Π(i) = g
Detection of an improving chain : saedgi with a flow 3.

Modifications to the residual graph :
      s    a    b    c    d    e    f    g    h    i
 s    0    6    3    1    0    0    0    0    0    0
 a   10    0    3    0    0    0    0    0    0    0
 b    0    0    0    7    0    5    0    0    0    0
 c    7    0    0    0    0    0    0    0    0    0
 d    0    3    0    0    0    3    0    3    0    0
 e    0    3    0    0    5    0    0    0    0    0
 f    0    4    0    0    1    0    0    0    0    3
 g    0    0    0    0    5    0    3    0    4    1
 h    0    0    0    7    0    0    0    0    0    1
 i    0    0    0    0    0    0    5    5    7    0

⋆ Iteration 6 :
Breadth-first search :
abc ; Π(a) = s; Π(b) = s; Π(c) = s
e ; Π(e) = b
d ; Π(d) = e
g ; Π(g) = d
fhi ; Π(f) = g; Π(h) = g; Π(i) = g
Detection of an improving chain : sbedgi with a flow 1.

Modifications to the residual graph :
      s    a    b    c    d    e    f    g    h    i
 s    0    6    2    1    0    0    0    0    0    0
 a   10    0    3    0    0    0    0    0    0    0
 b    1    0    0    7    0    4    0    0    0    0
 c    7    0    0    0    0    0    0    0    0    0
 d    0    3    0    0    0    4    0    2    0    0
 e    0    3    1    0    4    0    0    0    0    0
 f    0    4    0    0    1    0    0    0    0    3
 g    0    0    0    0    6    0    3    0    4    0
 h    0    0    0    7    0    0    0    0    0    1
 i    0    0    0    0    0    0    5    6    7    0

⋆ Iteration 7 :
Breadth-first search :
abc ; Π(a) = s; Π(b) = s; Π(c) = s
e ; Π(e) = b
d ; Π(d) = e
g ; Π(g) = d
fh ; Π(f) = g; Π(h) = g
i ; Π(i) = f
Detection of an improving chain : sbedgfi with a flow 2.

Modifications to the residual graph :
      s    a    b    c    d    e    f    g    h    i
 s    0    6    0    1    0    0    0    0    0    0
 a   10    0    3    0    0    0    0    0    0    0
 b    3    0    0    7    0    2    0    0    0    0
 c    7    0    0    0    0    0    0    0    0    0
 d    0    3    0    0    0    6    0    0    0    0
 e    0    3    3    0    2    0    0    0    0    0
 f    0    4    0    0    1    0    0    2    0    1
 g    0    0    0    0    8    0    1    0    4    0
 h    0    0    0    7    0    0    0    0    0    1
 i    0    0    0    0    0    0    7    6    7    0

⋆ Iteration 8 :
Breadth-first search :
ac ; Π(a) = s; Π(c) = s
b ; Π(b) = a
e ; Π(e) = b
d ; Π(d) = e
No augmenting path found, terminating.

⋆ Max flow display :
      s    a    b    c    d    e    f    g    h    i
 s    0 10/16  3/3  7/8    0    0    0    0    0    0
 a    0    0  0/3    0  3/3  3/3  4/4    0    0    0
 b    0    0    0  0/7    0  3/5    0    0    0    0
 c    0    0    0    0    0    0    0    0  7/7    0
 d    0    0    0    0    0    0  1/1  8/8    0    0
 e    0    0    0    0  6/8    0    0    0    0    0
 f    0    0    0    0    0    0    0    0    0  7/8
 g    0    0    0    0    0    0  2/3    0  0/4  6/6
 h    0    0    0    0    0    0    0    0    0  7/8
 i    0    0    0    0    0    0    0    0    0    0

Value of the max flow max = 20

Select problem number (1–10) or q to quit: 2
Choose algorithm ([max] Ford-Fulkerson / [push] Push-Relabel): push

=== Push–Relabel on example2.txt ===

PUSH 16 from s to a (initial preflow)
PUSH 3 from s to b (initial preflow)
PUSH 8 from s to c (initial preflow)
Iteration 1: RELABEL a from 0 to 1
Iteration 2: PUSH 3 from a to b; excess[a]=13; excess[b]=6
Iteration 3: PUSH 3 from a to d; excess[a]=10; excess[d]=3
Iteration 4: PUSH 3 from a to e; excess[a]=7; excess[e]=3
Iteration 5: PUSH 4 from a to f; excess[a]=3; excess[f]=4
Iteration 6: RELABEL a from 1 to 11
Iteration 7: PUSH 3 from a to s; excess[a]=0; excess[s]=-24
Iteration 8: RELABEL b from 0 to 1
Iteration 9: PUSH 6 from b to c; excess[b]=0; excess[c]=14
Iteration 10: RELABEL c from 0 to 1
Iteration 11: PUSH 7 from c to h; excess[c]=7; excess[h]=7
Iteration 12: RELABEL c from 1 to 2
Iteration 13: PUSH 6 from c to b; excess[c]=1; excess[b]=6
Iteration 14: RELABEL c from 2 to 11
Iteration 15: PUSH 1 from c to s; excess[c]=0; excess[s]=-23
Iteration 16: RELABEL d from 0 to 1
Iteration 17: PUSH 1 from d to f; excess[d]=2; excess[f]=5
Iteration 18: PUSH 2 from d to g; excess[d]=0; excess[g]=2
Iteration 19: RELABEL e from 0 to 2
Iteration 20: PUSH 3 from e to d; excess[e]=0; excess[d]=3
Iteration 21: RELABEL f from 0 to 1
Iteration 22: PUSH 5 from f to i; excess[f]=0; excess[i]=5
Iteration 23: RELABEL h from 0 to 1
Iteration 24: PUSH 7 from h to i; excess[h]=0; excess[i]=12
Iteration 25: RELABEL b from 1 to 3
Iteration 26: PUSH 5 from b to e; excess[b]=1; excess[e]=5
Iteration 27: RELABEL b from 3 to 11
Iteration 28: PUSH 1 from b to s; excess[b]=0; excess[s]=-22
Iteration 29: RELABEL g from 0 to 1
Iteration 30: PUSH 2 from g to i; excess[g]=0; excess[i]=14
Iteration 31: RELABEL d from 1 to 2
Iteration 32: PUSH 3 from d to g; excess[d]=0; excess[g]=3
Iteration 33: RELABEL e from 2 to 3
Iteration 34: PUSH 5 from e to d; excess[e]=0; excess[d]=5
Iteration 35: PUSH 3 from g to i; excess[g]=0; excess[i]=17
Iteration 36: PUSH 3 from d to g; excess[d]=2; excess[g]=3
Iteration 37: RELABEL d from 2 to 4
Iteration 38: PUSH 2 from d to e; excess[d]=0; excess[e]=2
Iteration 39: PUSH 1 from g to i; excess[g]=2; excess[i]=18
Iteration 40: RELABEL g from 1 to 2
Iteration 41: PUSH 2 from g to f; excess[g]=0; excess[f]=2
Iteration 42: RELABEL e from 3 to 5
Iteration 43: PUSH 2 from e to d; excess[e]=0; excess[d]=2
Iteration 44: PUSH 2 from f to i; excess[f]=0; excess[i]=20
Iteration 45: RELABEL d from 4 to 6
Iteration 46: PUSH 2 from d to e; excess[d]=0; excess[e]=2
Iteration 47: RELABEL e from 5 to 7
Iteration 48: PUSH 2 from e to d; excess[e]=0; excess[d]=2
Iteration 49: RELABEL d from 6 to 8
Iteration 50: PUSH 2 from d to e; excess[d]=0; excess[e]=2
Iteration 51: RELABEL e from 7 to 9
Iteration 52: PUSH 2 from e to d; excess[e]=0; excess[d]=2
Iteration 53: RELABEL d from 8 to 10
Iteration 54: PUSH 2 from d to e; excess[d]=0; excess[e]=2
Iteration 55: RELABEL e from 9 to 11
Iteration 56: PUSH 2 from e to d; excess[e]=0; excess[d]=2
Iteration 57: RELABEL d from 10 to 12
Iteration 58: PUSH 2 from d to a; excess[d]=0; excess[a]=2
Iteration 59: PUSH 2 from a to s; excess[a]=0; excess[s]=-20

Value of the max flow max = 20

⋆ Max flow display :
      s    a    b    c    d    e    f    g    h    i
 s    0 11/16  2/3  7/8    0    0    0    0    0    0
 a    0    0  3/3    0  1/3  3/3  4/4    0    0    0
 b    0    0    0  0/7    0  5/5    0    0    0    0
 c    0    0    0    0    0    0    0    0  7/7    0
 d    0    0    0    0    0    0  1/1  8/8    0    0
 e    0    0    0    0  8/8    0    0    0    0    0
 f    0    0    0    0    0    0    0    0    0  7/8
 g    0    0    0    0    0    0  2/3    0  0/4  6/6
 h    0    0    0    0    0    0    0    0    0  7/8
 i    0    0    0    0    0    0    0    0    0    0

Value of the max flow max = 20

Select problem number (1–10) or q to quit: